module.exports = {
    extends: [
        'eslint:recommended',
        'plugin:react/recommended'
    ],
    parser: 'babel-eslint',
    parserOptions: {
        parser: 'babel-eslint',
        ecmaVersion: 2017,
        sourceType: 'module',
        allowImportExportEverywhere: true
    },
    settings: {
        "react": {
            pragma: 'React',
            version: "detect",
        }
    },
    env: {
        amd: true,
        browser: true,
        node: true,
    },
    rules: {
        'indent': ['error', 4, { 'SwitchCase': 1, 'MemberExpression': 1 }],
        'no-trailing-spaces': 'error',
        'no-console': process.env.NODE_ENV === 'production' ? [
            'error',
            { 'allow': ['warn', 'error'] },
        ] : 'off',
        'no-debugger': process.env.NODE_ENV === 'production' ? 'error' : 'off',
        'no-fallthrough': 'off',
        'no-case-declarations': 'off',
        'space-before-function-paren': 'error',
        'spaced-comment': 'error',
        'arrow-spacing': 'error',
        'keyword-spacing': 'error',
        'semi': ['error', 'always'],
        'dot-location': ['error', 'property'],
        'dot-notation': 'error',
        'no-alert': 'off',
        'eqeqeq': ['error', 'always'],
        'no-floating-decimal': 'error',
        'no-global-assign': 'error',
        'no-multi-spaces': 'error',
        'no-useless-return': 'error',
        'no-undef-init': 'warn',
        'no-use-before-define': ['error', { 'functions': false }],
        'array-bracket-newline': ['error', 'consistent'],
        'brace-style': ['error', '1tbs'],
        'comma-dangle': ['error', 'always-multiline'],
        'comma-spacing': 'error',
        'comma-style': 'error',
        'eol-last': 'error',
        'func-call-spacing': 'error',
        'jsx-quotes': ['error', 'prefer-single'],
        'quotes': ['error', 'single', { 'allowTemplateLiterals': true }],
        'quote-props': ['error', 'as-needed'],
        'linebreak-style': 'warn',
        'lines-around-comment': 'warn',
        'max-depth': ['error', 3],
        'max-statements-per-line': 'error',
        'newline-per-chained-call': 'error',
        'no-lonely-if': 'error',
        'no-mixed-operators': 'warn',
        'no-multiple-empty-lines': ['error', { 'max': 1, 'maxEOF': 0, 'maxBOF': 0 }],
        'no-tabs': 'warn',
        'space-before-blocks': 'error',
        'space-infix-ops': 'error',
        'space-unary-ops': [2, {
            'words': true,
            'nonwords': true,
            'overrides': {
                '-': false,
                '++': false,
                '--': false,
            },
        }],
        'space-in-parens': 'error',
        'switch-colon-spacing': 'error',
        'arrow-body-style': 'error',
        'no-duplicate-imports': 'warn',
        'no-useless-computed-key': 'warn',
        'no-var': 'error',
        'arrow-parens': ['error', 'as-needed'],
        'curly': 'error',
        'require-atomic-updates': 'off',
        'no-prototype-builtins': 'off',
        'react/prop-types': 0,
        'react/jsx-max-props-per-line': ['error', {
            'maximum': 2,
            'when': 'multiline',
        }],
        'react/jsx-first-prop-new-line': ['error', 'multiline-multiprop'],
        'react/jsx-closing-bracket-location': ['error', 'tag-aligned'],
        'react/jsx-curly-spacing': ['error', 'never', { allowMultiline: true }],
        'react/sort-comp': ['error', {
            order: [
                'static-variables',
                'static-methods',
                'instance-variables',
                'lifecycle',
                '/^on.+$/',
                'getters',
                'setters',
                '/^(get|set)(?!(InitialState$|DefaultProps$|ChildContext$)).+$/',
                'instance-methods',
                'everything-else',
                'rendering',
            ],
            groups: {
                lifecycle: [
                    'displayName',
                    'propTypes',
                    'contextTypes',
                    'childContextTypes',
                    'mixins',
                    'statics',
                    'defaultProps',
                    'constructor',
                    'getDefaultProps',
                    'getInitialState',
                    'state',
                    'getChildContext',
                    'getDerivedStateFromProps',
                    'componentWillMount',
                    'UNSAFE_componentWillMount',
                    'componentDidMount',
                    'componentWillReceiveProps',
                    'UNSAFE_componentWillReceiveProps',
                    'shouldComponentUpdate',
                    'componentWillUpdate',
                    'UNSAFE_componentWillUpdate',
                    'getSnapshotBeforeUpdate',
                    'componentDidUpdate',
                    'componentDidCatch',
                    'componentWillUnmount'
                ],
                rendering: [
                    '/^render.+$/',
                    'render'
                ],
            },
        }],
        'react/jsx-no-duplicate-props': ['error', { ignoreCase: true }],
        'react/jsx-pascal-case': ['error', {
            allowAllCaps: true,
            ignore: [],
        }],
        'react/no-danger': 'warn',
        'react/prefer-es6-class': ['error', 'always'],
        'react/prefer-stateless-function': ['error', { ignorePureComponents: true }],
        'react/react-in-jsx-scope': 'error',
        'react/require-render-return': 'error',
        'react/self-closing-comp': 'error',
        'react/jsx-wrap-multilines': ['error', {
            declaration: 'parens-new-line',
            assignment: 'parens-new-line',
            return: 'parens-new-line',
            arrow: 'parens-new-line',
            condition: 'parens-new-line',
            logical: 'parens-new-line',
            prop: 'parens-new-line',
        }],
        'react/no-danger-with-children': 'error',
        'react/no-unused-prop-types': ['error', {
            customValidators: [
            ],
            skipShapeProps: true,
        }],
        'react/destructuring-assignment': ['error', 'always'],
        'react/no-redundant-should-component-update': 'error',
        'react/no-unused-state': 'error',
        'react/no-typos': 'error',
        'react/jsx-tag-spacing': ['error', {
            closingSlash: 'never',
            beforeSelfClosing: 'always',
            afterOpening: 'never',
            beforeClosing: 'never',
        }],
        'react/boolean-prop-naming': ['off', {
            propTypeNames: ['bool', 'mutuallyExclusiveTrueProps'],
            rule: '^(is|has)[A-Z]([A-Za-z0-9]?)+',
            message: '',
        }],
        'react/jsx-curly-brace-presence': ['error', { props: 'always', children: 'always' }],
        'react/no-access-state-in-setstate': 'error',
        'react/jsx-props-no-multi-spaces': 'error',
        'react/jsx-curly-newline': ['error', {
            multiline: 'consistent',
            singleline: 'consistent',
        }],
        'react/jsx-props-no-spreading': ['warn', {
            html: 'enforce',
            custom: 'enforce',
            exceptions: [],
        }],
    },
};
